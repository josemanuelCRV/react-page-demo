{"version":3,"sources":["assets/images/logo.svg","components/Searcher.js","components/Imagen.js","components/Pagination.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Searcher","searcherRef","React","createRef","handleSubmit","e","preventDefault","data_input","current","value","props","dataToSearch","onSubmit","this","className","ref","type","placeholder","Component","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","target","rel","Pagination","onClick","previousPage","nextPage","Results","showPicture","imagenes","length","console","log","Fragment","map","key","id","App","state","termino","page","scroll","document","querySelector","scrollIntoView","setState","requestApi","query","url","fetch","then","response","json","resultado","hits","logo","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b10dd73e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nclass Searcher extends Component {\n\n    //Ref imput Reader\n    searcherRef = React.createRef();\n    \n    //Handle form submit event funcion \n    handleSubmit = (e) => {\n        e.preventDefault(); //hide query in browser \n        //retrieve the form input  \n        const data_input = this.searcherRef.current.value;\n        //send imput to Main App   \n        this.props.dataToSearch(data_input);\n    }\n\n    //show form\n    render() {\n        return (  \n            <form onSubmit={this.handleSubmit} >\n                <div className='row'>                   \n                    <div className='form-group col-md-8'>\n                        <input ref={this.searcherRef} type='text' className=\"form-control \n                        form-control-lg\" placeholder=\"Busca tu imagen. Ejemplo: Futbol\" />\n                    </div>\n                    <div className='form-group col-md-4'>\n                        <input type='submit' className=\"btn btn-lg \n                        btn-danger btn-block\" value=\"Buscar\" />\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\nexport default Searcher;\n\n \n\n","import React from 'react'\n\nconst Imagen = (props) => {\n\n    const { largeImageURL, likes, previewURL, tags, views } = props.imagen;\n\n    return (\n        // Card to display response.\n        <div className=\"col-12 col-sm-6 col-med-4 col-lg-3 mb-4\">  \n            <div className=\"card\"> \n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\n                <div className=\"card-body\"> \n                    <p className=\"card-text\">{likes} Me gusta</p>\n                    <p className=\"card-text\">{views} Vistas</p>\n                    <p className=\"card-text text-muted\">{tags}</p>\n                    <a href={largeImageURL} target=\"_blank\" rel=\"noopener noreferrer\"  className=\"btn btn-primary btn-block\"> Ver imagen </a>\n                </div>\n            </div>\n        </div>\n        \n    )\n}\nexport default Imagen;","import React from 'react'\n\n// si no recibe argumentos props, puede ir sin parentesis.\n\nconst Pagination = props => {\n\n    return (\n        <div className=\"py-3\">\n            <button type=\"button\" className=\"btn btn-info mr-1\" onClick={props.previousPage}>  &larr; Anterior </button>\n            <button type=\"button\" className=\"btn btn-info mr-1\" onClick={props.nextPage}> Siguiente &rarr; </button>\n        </div>\n    )\n}\nexport default Pagination;","import React, { Component } from 'react'\nimport Imagen from './Imagen';\nimport Pagination from './Pagination';\n\nclass Results extends Component {    \n\n    showPicture = () => {\n        const imagenes = this.props.imagenes;\n        if(imagenes.length === 0 ) return null;\n        console.log(imagenes);\n        return (\n            <React.Fragment>\n                <div className='col-12 p-5 row'>\n                    {imagenes.map(imagen => ( \n                       <Imagen \n                            key = {imagen.id}\n                            imagen = {imagen}\n                       /> \n                    ) ) }\n                </div>\n                <Pagination \n                    previousPage = {this.props.previousPage}\n                    nextPage = {this.props.nextPage} \n                />\n            </React.Fragment>\n        )\n    }\n    \n    render() {\n        return (\n            <React.Fragment> \n                { this.showPicture() }        \n            </React.Fragment>\n        )\n    }\n}\nexport default Results;\n","import React, { Component } from 'react';\nimport logo from './assets/images/logo.svg';\nimport './assets/css/bootstrap.css';\nimport Searcher from './components/Searcher'\nimport Results from './components/Results'\n\n\nclass App extends Component{\n\n  state = {\n    termino : '',\n    imagenes : [],\n    page : ''\n  }\n\n  //scroll to Top after pagination event. \n  scroll = () => {\n    const element = document.querySelector('.jumbotron');\n    element.scrollIntoView('smooth', 'end');\n  }\n\n  //go to previous page of results.\n  previousPage = () => {\n    //read current page state\n    let page = this.state.page;\n    //if first page, break.\n    if(page === 1) return null;  \n    // else, rest 1 to current page.\n    page -= 1;\n    //add new page value to stage.\n    this.setState({\n      page\n    }, () => { //callback \n      this.requestApi(); //new request.\n      this.scroll();  //go Top.\n    });\n    console.log(page);\n  }\n\n  //go to next page of results.\n  nextPage = () => {\n    let page = this.state.page;\n    page += 1;\n    this.setState({\n      page\n    }, () => {\n      this.requestApi();\n      this.scroll();\n    });\n    console.log(page);\n  }\n\n  //Fetch Promise. Store response in state\n  requestApi = () => {\n    const host = 'https://pixabay.com/api';\n    const apiKey = '15282361-16a29223e4df71ccde421c8ef';\n    const query = this.state.termino;\n    const filter = 'per_page=30';\n    const page = this.state.page;\n    const url = `${host}/?key=${apiKey}&q=${query}&${filter}&page=${page}`;\n    console.log(url);\n    fetch(url)\n      .then(response => response.json() )\n      .then(resultado => this.setState({ imagenes : resultado.hits }) ) \n  }\n\n  //retrieve input passed by handleSubmit \n  dataToSearch = (termino) => {\n    console.log(termino);\n    //store input in state \n    this.setState({\n      termino : termino, \n      //show first page by default \n      page: 1 \n    }, () => {\n      //callback request \n      this.requestApi();\n    })\n  }\n  \n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />   \n        </header>\n        {/** display search component */}\n        <div className=\"app container\">\n          <div className='jumbotron'>\n            <p className='lead text-center'>Buscador de im√°genes</p>\n            <Searcher \n              dataToSearch = {this.dataToSearch} // le pasa al hijo los datos\n            />\n          </div>\n          {/** display results component*/}\n          <Results \n            imagenes = {this.state.imagenes}\n            previousPage = {this.previousPage}\n            nextPage = {this.nextPage}\n          />\n        </div>\n      </div>\n    );\n\n  }\n}\nexport default App;\n\n  /**\n   * Workflow:\n   * ===================\n   *  1¬∫ App.class \n   *      - El Buscador(Padre)\n   *      - pasa al componente Searcher dataToSearch.\n   *  \n   *  2¬∫ Comp.Searcher (Hijo)\n   *      - Usuario realiza una b√∫squeda\n   *      - Obtiene los datos (handleSubmit) del input.\n   *      - Con Ref lee los datos ingresados.\n   *      - Con funcion props devuelve los datos al Padre.\n   *  \n   *  3¬∫ App.class - El Buscador(Padre)\n   *      - Recibe el props devuelto por handleSubmit.\n   *      - Sobrescribe el estado con los datos recibidos.\n   *      - Cuando finaliza de sobrescribir state, hace un Callback.\n   *      - Callback ejecuta la funci√≥n de requestApi.\n   *      - requestApi realiza busqueda y guarda en state la respuesta.\n   *      - Se inyecta componente Result.\n   *      - En Results inyectado guarda el state a en variables.\n   *        \n   *  4¬∫ Comp.Result.\n   *      - Results accede a las variables mediante props.\n   *      - Recupera el valor de la respuesta que estaba almacenada en state.\n   *      - Con funcion .map se itera respuesta.\n   *      - Se inyecta Componente Imagen\n   *      - Cada resultado de la iteraci√≥n se inyecta en el componente Imagen.\n   *      - En Imagen inyect se pasan dos params, uniqueID & resultado de iteraci√≥n actual.   \n   *  \n   *  5¬∫ Comp.Imagen.\n   *      - El comp Imagen crea un Card.\n   *      - Accede con props a las vars que se pasaron desde Imagen (Result).\n   *      - Guarda en variables determinadas keys del obejeto respuesta.\n   *      - Infla la card con los valores recuperados de las keys.   \n   *      - Termina Comp Imagen y continua por Results.\n   * \n   *   6¬∫ Comp.Result.\n   *      - Una vez realizadas todas las iteraciones.\n   *      - Se inyecta el comp. Pagination.\n   *      - Accde con props a prev&next vars que se inyectaron en Results.\n   *      - Guarda el valor de estas vars.\n   * \n   *    7¬∫ Comp.Pagination\n   *      - Renderiza dos botones.\n   *      - Cada boton tiene un evento onClick, \n   *      - El evento onClick llama a Funciones Prev&Next de la clase App.\n   *      - Continua la accion por la funcion de la clase App que se invoque.\n   *    \n   *     8¬∫ App class\n   *      - funcion previousPage()\n   *          > lee el estado actual\n   *          > comprueba que no estar en al primera pag antes de retroceder.\n   *          > resta -1 a la pag actual.\n   *          > guarda el valor de la pag atual en state.\n   *          > Invoca a requestApi().\n   *          > requestApi() carga el nuevo estado de la pag y realiza la busqueda.\n   *          > al terminar ciclo de requestApi, se invoca a scroll().\n   *          > scroll mueve el scroll a una posicion de la vista. (top).\n   * \n   *      - funcion nextPage()\n   *          > lee el estado actual\n   *          > suma +1 a la pag actual.\n   *          > guarda el valor de la pag atual en state.\n   *          > Invoca a requestApi().\n   *          > requestApi() carga el nuevo estado de la pag y realiza la busqueda.\n   *          > al terminar ciclo de requestApi, se invoca a scroll().\n   *          > scroll mueve el scroll a una posicion de la vista. (top).\n   */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}